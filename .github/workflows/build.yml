name: Build

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# ZETTLR GITHUB ACTIONS WORKFLOW FILE                                         #
#                                                                             #
# This file contains the logic necessary to build a full release from source. #
#                                                                             #
# Whenever someone creates a new git tag on the master branch, this workflow  #
# will be triggered, building the corresponding release for all platforms.    #
# This entails running three workers, one on Ubuntu, one on macos, and one on #
# Windows, in order to build the application. Each build worker clones the    #
# repository, installs the dependencies, then runs the actual build, before   #
# uploading the resulting artifact(s) to the worker's temporary space. After  #
# all three builds have been successfully completed, the last job worker will #
# start, download all created assets, generate the SHA256 checksums for them, #
# verify the sums, create a new release draft with the corresponding tag, and #
# finally upload all generated assets to the release draft.                   #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# This build can be triggered by two actions:
# * "push" to the master branch. In that case, a regular release (incl. tag)
#   will be created.
# * "workflow_dispatch". This builds a nightly. Bonus: We can manually trigger it.
on:
  push:
    branches:
      - master
  workflow_dispatch:
    # No additional properties.

# Defaults for every job and step in this workflow
defaults:
  run:
    shell: bash # Run everything using bash

env:
  NODE_VERSION: '16'

# This workflow file contains four jobs, three to build the corresponding
# releases on all three supported platforms, and a last one, which will
# create the release draft.
jobs:
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #                                                                           #
  #                              WINDOWS BUILDS                               #
  #                                                                           #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  build_win:
    name: Windows build
    runs-on: windows-latest
    steps:
      # Check out master for a regular release, or develop branch for a nightly
      - name: Clone repository (master branch)
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: actions/checkout@v2
        with:
          ref: 'master'
      - name: Clone repository (develop branch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v2
        with:
          ref: 'develop'
      - name: Setup NodeJS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Set tag version to nightly
        # If this a scheduled workflow, we know that we should build a nightly
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: node ./scripts/set-nightly-version.js
      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./scripts/get-pkg-version.js)
          echo ::set-output name=version::$pkgver
      - name: Set up build environment
        run: yarn install --frozen-lockfile
      # Create the windows binaries. First package both for x64 and arm64, then
      # make an NSIS installer. Make sure to sign the windows installer using
      # the corresponding SSL EV.
      - name: Package Windows (x64)
        run: yarn package:win-x64
        env:
          CSC_LINK: ${{ secrets.WIN_CERT }}
          CSC_KEY_PASSWORD: ${{ secrets.WIN_CERT_PASS }}
      - name: Package Windows (arm64)
        run: yarn package:win-arm
        env:
          CSC_LINK: ${{ secrets.WIN_CERT }}
          CSC_KEY_PASSWORD: ${{ secrets.WIN_CERT_PASS }}
      - name: Build NSIS installer (x64)
        run: yarn release:win-x64
        env:
          CSC_LINK: ${{ secrets.WIN_CERT }}
          CSC_KEY_PASSWORD: ${{ secrets.WIN_CERT_PASS }}
      - name: Build NSIS installer (arm64)
        run: yarn release:win-arm
        env:
          CSC_LINK: ${{ secrets.WIN_CERT }}
          CSC_KEY_PASSWORD: ${{ secrets.WIN_CERT_PASS }}
      # The ARM64 artifact is being output simply as .exe w/o arch, since we
      # have to include --ia32 in the build flags for ARM builds (thus,
      # strictly speaking it has two architectures).
      - name: Rename arm64 artifact
        run: mv ./release/Zettlr-${{steps.ref.outputs.version}}.exe ./release/Zettlr-${{steps.ref.outputs.version}}-arm64.exe
      - name: Cache NSIS installer (x64)
        uses: actions/upload-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-x64.exe
          path: ./release/Zettlr-${{steps.ref.outputs.version}}-x64.exe
      - name: Cache NSIS installer (arm64)
        uses: actions/upload-artifact@v1
        with:
          # It is important to understand that "name" does NOT refer to the
          # uploaded file's name, but it's rather an ID, so the file needs to
          # be renamed prior to uploading (see step above).
          name: Zettlr-${{steps.ref.outputs.version}}-arm64.exe
          path: ./release/Zettlr-${{steps.ref.outputs.version}}-arm64.exe

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #                                                                           #
  #                               MACOS BUILDS                                #
  #                                                                           #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  build_macos:
    name: macOS build
    runs-on: macos-latest
    steps:
      # Check out master for a regular release, or develop branch for a nightly
      - name: Clone repository (master branch)
        if: ${{ github. event_name != 'schedule' }}
        uses: actions/checkout@v2
        with:
          ref: 'master'
      - name: Clone repository (develop branch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v2
        with:
          ref: 'develop'
      - name: Setup NodeJS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Set tag version to nightly
        # If this a scheduled workflow, we know that we should build a nightly
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: node ./scripts/set-nightly-version.js
      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./scripts/get-pkg-version.js)
          echo ::set-output name=version::$pkgver
      - name: Set up build environment
        run: yarn install --frozen-lockfile
      # Save the macOS certificate on this runner for forge to access it in the
      # next step below.
      - name: Retrieve code signing certificate
        run: ./scripts/add-osx-cert.sh
        env:
          MACOS_CERT: ${{ secrets.MACOS_CERT }}
          MACOS_CERT_PASS: ${{ secrets.MACOS_CERT_PASS }}
      # Now, finally build the app itself. This is done in four steps: First,
      # two steps make sure that the app is correctly bundled in ./out, then
      # the next two steps use electron builder to create the DMG files.
      # This step also signs and notarizes the app. NOTE that forge does this,
      # as we shall not notarize and/or sign the resulting DMG file as well!
      - name: Package macOS (arm64)
        run: DEBUG='*' yarn package:mac-arm # DEBUG: This takes way too long
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
      - name: Package macOS (x64)
        run: yarn package:mac-x64
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
      - name: Build macOS image file (x64)
        run: yarn release:mac-x64
        # We need to rename the artifact prior to uploading so that the x64 and
        # arm64 releases do not overwrite themselves.
      - name: Rename x64 artifact
        run: mv ./release/Zettlr-${{steps.ref.outputs.version}}.dmg ./release/Zettlr-${{steps.ref.outputs.version}}-x64.dmg
      # Now the same procedure for arm64: First build ...
      - name: Build macOS image file (arm64)
        run: yarn release:mac-arm
      # ... then rename
      - name: Rename arm64 artifact
        run: mv ./release/Zettlr-${{steps.ref.outputs.version}}.dmg ./release/Zettlr-${{steps.ref.outputs.version}}-arm64.dmg
      # Finally upload both
      - name: Cache macOS release (x64)
        uses: actions/upload-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-x64.dmg
          path: ./release/Zettlr-${{steps.ref.outputs.version}}-x64.dmg
      # And now the same for arm64
      - name: Cache macOS release (arm64)
        uses: actions/upload-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-arm64.dmg
          path: ./release/Zettlr-${{steps.ref.outputs.version}}-arm64.dmg

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #                                                                           #
  #                               LINUX BUILDS                                #
  #                                                                           #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  build_linux:
    name: Linux build
    runs-on: ubuntu-latest
    steps:
      # Check out master for a regular release, or develop branch for a nightly
      - name: Clone repository (master branch)
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: actions/checkout@v2
        with:
          ref: 'master'
      - name: Clone repository (develop branch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v2
        with:
          ref: 'develop'
      - name: Setup NodeJS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Set tag version to nightly
        # If this a scheduled workflow, we know that we should build a nightly
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: node ./scripts/set-nightly-version.js
      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./scripts/get-pkg-version.js)
          echo ::set-output name=version::$pkgver
      - name: Set up build environment
        run: yarn install --frozen-lockfile
      - name: Package Linux targets (x64)
        run: yarn package:linux-x64
      - name: Create Linux installers (x64)
        run: yarn release:linux-x64
      - name: Package Linux targets (arm64)
        run: yarn package:linux-arm
      - name: Create Linux installers (arm64)
        run: yarn release:linux-arm
      - name: Cache .deb release (x64)
        uses: actions/upload-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-amd64.deb
          path: ./release/Zettlr-${{steps.ref.outputs.version}}-amd64.deb
      - name: Cache .rpm release (x64)
        uses: actions/upload-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-x86_64.rpm
          path: ./release/Zettlr-${{steps.ref.outputs.version}}-x86_64.rpm
      - name: Cache AppImage release (x64)
        uses: actions/upload-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-x86_64.AppImage
          path: ./release/Zettlr-${{steps.ref.outputs.version}}-x86_64.AppImage
      - name: Cache .deb release (arm64)
        uses: actions/upload-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-arm64.deb
          path: ./release/Zettlr-${{steps.ref.outputs.version}}-arm64.deb
      - name: Cache .rpm release (arm64)
        uses: actions/upload-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-aarch64.rpm
          path: ./release/Zettlr-${{steps.ref.outputs.version}}-aarch64.rpm
      - name: Cache AppImage release (arm64)
        uses: actions/upload-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-arm64.AppImage
          path: ./release/Zettlr-${{steps.ref.outputs.version}}-arm64.AppImage

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #                                                                           #
  #                          PREPARE RELEASE DRAFT                            #
  #                                                                           #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  # After the three builds, this job downloads all assets, creates and verifies
  # SHA256 checksums, and finally creates a release draft and uploads all
  # assets to it. NOTE: If the workflow detects it is being run on schedule,
  # this means that it does NOT create a release draft, but rather upload all
  # assets to the Zettlr server to offer a new nightly.
  prepare_release:
    name: Prepare release draft
    # Make sure (and wait until) the builds have succeeded
    needs: [build_win, build_macos, build_linux]
    runs-on: ubuntu-latest
    steps:
      # NOTE: Here we do not care about which branch is checked out since we
      # just need the two scripts which are present in both.
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Setup NodeJS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Set tag version to nightly
        # If this a scheduled workflow, we know that we should build a nightly
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: node ./scripts/set-nightly-version.js
      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./scripts/get-pkg-version.js)
          echo ::set-output name=version::$pkgver
      - name: Make release directory
        run: mkdir ./release
      # First, download all resulting assets from the previous steps.
      - name: Download NSIS installer (x64)
        uses: actions/download-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-x64.exe
          path: ./release
      - name: Download NSIS installer (arm64)
        uses: actions/download-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-arm64.exe
          path: ./release
      - name: Download macOS image (x64)
        uses: actions/download-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-x64.dmg
          path: ./release
      - name: Download macOS image (arm64)
        uses: actions/download-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-arm64.dmg
          path: ./release
      - name: Download .deb-installer (x64)
        uses: actions/download-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-amd64.deb
          path: ./release
      - name: Download .rpm-installer (x64)
        uses: actions/download-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-x86_64.rpm
          path: ./release
      - name: Download AppImage binary (x64)
        uses: actions/download-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-x86_64.AppImage
          path: ./release
      - name: Download .deb-installer (arm64)
        uses: actions/download-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-arm64.deb
          path: ./release
      - name: Download .rpm-installer (arm64)
        uses: actions/download-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-aarch64.rpm
          path: ./release
      - name: Download AppImage binary (arm64)
        uses: actions/download-artifact@v1
        with:
          name: Zettlr-${{steps.ref.outputs.version}}-arm64.AppImage
          path: ./release
      # Now we are set, we have all five release assets on the VM. It's time to
      # create the SHA-checksums file and then upload everything!
      - name: Generate SHA256 checksums
        run: |
          cd ./release
          sha256sum "Zettlr-${{steps.ref.outputs.version}}-x64.exe" > "SHA256SUMS.txt"
          sha256sum "Zettlr-${{steps.ref.outputs.version}}-arm64.exe" >> "SHA256SUMS.txt"
          sha256sum "Zettlr-${{steps.ref.outputs.version}}-x64.dmg" >> "SHA256SUMS.txt"
          sha256sum "Zettlr-${{steps.ref.outputs.version}}-arm64.dmg" >> "SHA256SUMS.txt"
          sha256sum "Zettlr-${{steps.ref.outputs.version}}-amd64.deb" >> "SHA256SUMS.txt"
          sha256sum "Zettlr-${{steps.ref.outputs.version}}-x86_64.rpm" >> "SHA256SUMS.txt"
          sha256sum "Zettlr-${{steps.ref.outputs.version}}-x86_64.AppImage" >> "SHA256SUMS.txt"
          sha256sum "Zettlr-${{steps.ref.outputs.version}}-arm64.deb" >> "SHA256SUMS.txt"
          sha256sum "Zettlr-${{steps.ref.outputs.version}}-aarch64.rpm" >> "SHA256SUMS.txt"
          sha256sum "Zettlr-${{steps.ref.outputs.version}}-arm64.AppImage" >> "SHA256SUMS.txt"
          cd ..
      - name: Verify checksums
        run: |
          cd ./release
          sha256sum -c SHA256SUMS.txt
          cd ..
      # IF WE BUILD A NIGHTLY, AT THIS POINT JUST UPLOAD TO THE SERVER.
      - name: Upload nightlies to the server
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: easingthemes/ssh-deploy@v2.0.7
        env:
          SSH_PRIVATE_KEY: ${{ secrets.NIGHTLY_SSH_PRIVATE_KEY }}
          ARGS: "-vzhr"
          SOURCE: "release/"
          REMOTE_HOST: ${{ secrets.NIGHTLY_REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.NIGHTLY_REMOTE_USER }}
          TARGET: ${{ secrets.NIGHTLY_TARGET }}
      # OTHERWISE:
      # Create a new release draft
      - name: Create release draft
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Populate the inputs of the release already
          tag_name: v${{steps.ref.outputs.version}}
          name: Release v${{steps.ref.outputs.version}}
          body: If you can read this, we have forgotten to fill in the changelog. Sorry!
          draft: true # Always create as draft, so that we can populate the remaining values easily
          # Gosh, is that convenient as opposed to earlier!
          files: |
            ./release/Zettlr-${{steps.ref.outputs.version}}-x64.exe
            ./release/Zettlr-${{steps.ref.outputs.version}}-arm64.exe
            ./release/Zettlr-${{steps.ref.outputs.version}}-x64.dmg
            ./release/Zettlr-${{steps.ref.outputs.version}}-arm64.dmg
            ./release/Zettlr-${{steps.ref.outputs.version}}-amd64.deb
            ./release/Zettlr-${{steps.ref.outputs.version}}-x86_64.rpm
            ./release/Zettlr-${{steps.ref.outputs.version}}-x86_64.AppImage
            ./release/Zettlr-${{steps.ref.outputs.version}}-arm64.deb
            ./release/Zettlr-${{steps.ref.outputs.version}}-aarch64.rpm
            ./release/Zettlr-${{steps.ref.outputs.version}}-arm64.AppImage
            ./release/SHA256SUMS.txt
