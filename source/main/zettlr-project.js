/**
 * @ignore
 * BEGIN HEADER
 *
 * Contains:        ZettlrProject class
 * CVM-Role:        Model
 * Maintainer:      Hendrik Erz
 * License:         GNU GPL v3
 *
 * Description:     This file contains a class that provides functions for a
 *                  functional project deployment in Zettlr. It extends the
 *                  functionality of ZettlrDir to also be able to export all
 *                  files in one single PDF file. Therefore here's the
 *                  functionality that you need to write whole books!
 *
 * END HEADER
 */

const fs = require('fs');
const path = require('path');

const PROJECT_FILE = '.ztr-project';

class ZettlrProject
{
    constructor(directory)
    {
        this._dir = directory;
        this._cfgtpl = {
            // This object contains all necessary config values. This classes'
            // functionality has been taken from ZettlrConfig a lot.
            "pdf"       : {
                "author" : 'Generated by Zettlr', // Default user name
                "keywords" : '', // PDF keywords
                "papertype" : 'a4paper', // Paper to use, e.g. A4 or Letter
                "pagenumbering": 'arabic',
                "tmargin": 3, // Margins to paper (top, right, bottom, left)
                "rmargin": 3,
                "bmargin": 3,
                "lmargin": 3,
                "margin_unit": 'cm',
                "lineheight": '1.2',
                "mainfont": 'Times New Roman',
                "fontsize": 12
            },
            "title": this._dir.name // Default project title is the directory's name
        };
        this._cfg = null;
        this._projectFile = path.join(this._dir.path, PROJECT_FILE);

        this._read();
    }

    _read()
    {
        this._cfg = this._cfgtpl;
        try {
            let stat = fs.lstatSync(this._projectFile);
            this._update(fs.readFileSync(this._projectFile, 'utf8'));
        } catch(e) {
            this.save(); // Simply create the file
        }
    }

    save()
    {
        fs.writeFileSync(this._projectFile, JSON.stringify(this._cfg), 'utf8');
    }

    /**
     * Removes the project file
     * @return {null} Always returns null.
     */
    remove()
    {
        // This removes the project file.
        try {
            let stat = fs.lstatSync(this._projectFile);
            fs.unlink(this._projectFile, (err) => {
                if(err) {
                    // TODO: Handle error.
                }
            });
        } catch(e) {
            // No file present, so let's simply do nothing.
        }

        return null;
    }

    /**
     * Returns the Project properties
     * @return {Object} The properties for this project.
     */
    getProperties()
    {
        return this._cfg;
    }

    /**
     * Update the complete configuration object with new values
     * @param  {Object} newcfg               The new object containing new props
     * @param  {Object} [oldcfg=this.config] Necessary for recursion
     * @return {void}                      Does not return anything.
     */
    _update(newcfg, oldcfg = this._cfg)
    {
        // Overwrite all given attributes (and leave the not given in place)
        // This will ensure sane defaults.
        for (var prop in oldcfg) {
            if (newcfg.hasOwnProperty(prop) && (newcfg[prop] != null)) {
                // We have some variable-length arrays that only contain
                // strings, e.g. we cannot update them using update()
                if((typeof oldcfg[prop] === 'object') && !Array.isArray(oldcfg[prop])) {
                    // Update sub-object
                    this._update(newcfg[prop], oldcfg[prop]);
                } else {
                    oldcfg[prop] = newcfg[prop];
                }
            }
        }
    }

    /**
     * Static method used by ZettlrDir to determine whether or not it's a project.
     * @param  {ZettlrDir}  directory The directory for which existence of this file should be testet.
     * @return {Boolean}           Returns true, if a corresponding file has been found, or null.
     */
    static isProject(directory)
    {
        try {
            let stat = fs.lstatSync(path.join(directory.path, PROJECT_FILE));
            return true; // A project file has been found, so return true
        } catch(e) {
            return false; // No project file present -> return false.
        }
    }
}

module.exports = ZettlrProject;
